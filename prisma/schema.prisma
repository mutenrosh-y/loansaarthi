// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BRANCH_MANAGER
  LOAN_OFFICER
  CUSTOMER_SERVICE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  CLOSED
  DEFAULT
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  role          UserRole
  branchId      String?
  branch        Branch?   @relation(fields: [branchId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  customers     Customer[]
  loans         Loan[]
  documents     Document[]
  approvedLoans Loan[]    @relation("LoanApproval")
  verifiedDocuments Document[] @relation("DocumentVerification")
}

model Branch {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  country   String
  users     User[]
  customers Customer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String
  address       String
  city          String
  state         String
  country       String
  kycStatus     Boolean   @default(false)
  branchId      String
  branch        Branch    @relation(fields: [branchId], references: [id])
  assignedTo    String
  assignedUser  User      @relation(fields: [assignedTo], references: [id])
  loans         Loan[]
  documents     Document[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Loan {
  id              String      @id @default(cuid())
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  amount          Float
  interestRate    Float
  tenure          Int         // in months
  status          LoanStatus  @default(PENDING)
  emiAmount       Float
  totalAmount     Float
  disbursedAmount Float?
  disbursedDate   DateTime?
  documents       Document[]
  createdBy       String
  createdByUser   User        @relation(fields: [createdBy], references: [id])
  approvedBy      String?
  approvedByUser  User?       @relation("LoanApproval", fields: [approvedBy], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Document {
  id          String         @id @default(cuid())
  name        String
  type        String
  url         String
  status      DocumentStatus @default(PENDING)
  expiryDate  DateTime?
  customerId  String
  customer    Customer       @relation(fields: [customerId], references: [id])
  loanId      String?
  loan        Loan?          @relation(fields: [loanId], references: [id])
  uploadedBy  String
  uploadedByUser User        @relation(fields: [uploadedBy], references: [id])
  verifiedBy  String?
  verifiedByUser User?       @relation("DocumentVerification", fields: [verifiedBy], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Communication {
  id          String   @id @default(cuid())
  type        String   // SMS, EMAIL, WHATSAPP
  recipient   String
  subject     String?
  content     String
  status      String   // SENT, FAILED, PENDING
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}