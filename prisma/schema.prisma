generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  password          String
  role              UserRole
  branchId          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  customers         Customer[]
  documents         Document[]
  verifiedDocuments Document[]     @relation("DocumentVerification")
  approvedLoans     Loan[]         @relation("LoanApproval")
  loans             Loan[]
  Notification      Notification[]
  branch            Branch?        @relation(fields: [branchId], references: [id])
}

model Branch {
  id        String     @id @default(cuid())
  name      String
  address   String
  city      String
  state     String
  country   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers Customer[]
  users     User[]
}

model Customer {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  phone        String
  address      String
  city         String
  state        String
  country      String
  kycStatus    Boolean    @default(false)
  branchId     String
  assignedTo   String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignedUser User       @relation(fields: [assignedTo], references: [id])
  branch       Branch     @relation(fields: [branchId], references: [id])
  documents    Document[]
  loans        Loan[]
}

model Loan {
  id               String         @id @default(cuid())
  customerId       String
  amount           Float
  interestRate     Float
  tenure           Int
  status           LoanStatus     @default(PENDING)
  emiAmount        Float
  totalAmount      Float
  disbursedAmount  Float?
  disbursedDate    DateTime?
  createdBy        String
  approvedBy       String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  purpose          String
  type             String
  approvalComments String?
  approvalDate     DateTime?
  rejectionDate    DateTime?
  rejectionReason  String?
  documents        Document[]
  approvedByUser   User?          @relation("LoanApproval", fields: [approvedBy], references: [id])
  createdByUser    User           @relation(fields: [createdBy], references: [id])
  customer         Customer       @relation(fields: [customerId], references: [id])
  Notification     Notification[]
}

model Document {
  id                   String         @id @default(cuid())
  name                 String
  type                 String
  url                  String
  status               DocumentStatus @default(PENDING)
  expiryDate           DateTime?
  customerId           String
  loanId               String?
  uploadedBy           String
  verifiedBy           String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  verificationComments String?
  verifiedAt           DateTime?
  cloudinaryPublicId   String
  customer             Customer       @relation(fields: [customerId], references: [id])
  loan                 Loan?          @relation(fields: [loanId], references: [id])
  uploadedByUser       User           @relation(fields: [uploadedBy], references: [id])
  verifiedByUser       User?          @relation("DocumentVerification", fields: [verifiedBy], references: [id])
  Notification         Notification[]
}

model Communication {
  id        String   @id @default(cuid())
  type      String
  recipient String
  subject   String?
  content   String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String    @id
  type       String
  title      String
  message    String
  read       Boolean   @default(false)
  userId     String
  loanId     String?
  documentId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime
  Document   Document? @relation(fields: [documentId], references: [id])
  Loan       Loan?     @relation(fields: [loanId], references: [id])
  User       User      @relation(fields: [userId], references: [id])
}

model LoanInquiry {
  id             String   @id @default(cuid())
  name           String
  gender         String
  dobYear        String
  dobMonth       String
  dobDay         String
  mobile         String
  email          String
  pan            String
  loanAmount     Float
  employmentType String
  companyName    String
  monthlyIncome  Float
  workEmail      String
  address1       String
  address2       String
  city           String
  state          String
  pincode        String
  otpVerified    Boolean
  createdAt      DateTime @default(now())
}

enum UserRole {
  ADMIN
  BRANCH_MANAGER
  LOAN_OFFICER
  CUSTOMER_SERVICE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  CLOSED
  DEFAULT
}

enum DocumentStatus {
  PENDING
  VERIFIED
  REJECTED
  EXPIRED
}
